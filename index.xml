<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lynn的小屋</title>
    <link>https://lynnlu07.github.io/</link>
    <description>Recent content on Lynn的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Nov 2019 18:08:21 +0800</lastBuildDate>
    
	<atom:link href="https://lynnlu07.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS对象基本用法</title>
      <link>https://lynnlu07.github.io/2019/11/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 11 Nov 2019 18:08:21 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/11/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>1. 声明对象的两种语法 let obj={&#39;name&#39;:&#39;David&#39;, &#39;age&#39;:10} let obj= new Object({&#39;name&#39;:&amp;quot;David&amp;quot;}) console.log({&#39;name&#39;:&#39;David&#39;, &#39;age&#39;:10}) 键名可以包含任何字符，但都是字符串。 属性名加上中括号[]就可以成为变量。
2. 如何删除对象的属性 delete obj.xxx 或者 delete obj[&#39;xxx&#39;]删除obj的xxx属性
delete删除属性值和属性名，undefined只删除属性值。
&#39;xxx&#39; in obj === false表示不含有属性名。 &#39;xxx&#39; in obj &amp;amp;&amp;amp; obj.xxx === undefined表示含有属性名，但值为undefined。
3. 如何查看对象的属性 obj[&#39;key&#39;]查看单个属性。 Object.keys(obj)可以查看自身所有属性。 console.dir(obj)查看自身和共有属性。 obj.hasOwnProperty(&#39;toString&#39;)判断一个属性是自身的还是共有的。
4. 如何修改或增加对象的属性  直接赋值  let obj = {name:&#39;David&#39;} obj.name = &#39;David&#39; obj[&#39;name&#39;= &#39;David&#39;] obj[&#39;na&#39;+&#39;me&#39;= &#39;David&#39;] let key = &#39;name&#39;; obj[key] = &#39;David&#39;  批量赋值 Object.assign(obj, {xxx,yyy,zzz})  更改共有属性 共有属性无法通过自身修改或增加。  5.</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>https://lynnlu07.github.io/2019/10/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Mon, 28 Oct 2019 16:05:51 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/10/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>1994年，网景公司发布了一款浏览器，只能用来浏览，没有与访问者互动的能力，因此，网景公司需要一种网页脚本语言实现网络浏览器与网页互动。恰逢Sun公司公布的Java正式冲击市场，反响热烈。网景公司便与Sun公司合作，允许Java程序以小程序（applet）的形式在浏览器运行。但是，如果将Java作为脚本语言嵌入网页，会导致HTML页面过于复杂，所以，网景公司要求布兰登（Brendan Eich）开发出能够完全适用的语言，必须看着与Java类似，但更加简单。
布兰登基于C语言的基本语法，借鉴了Java语言的数据类型和内存管理，借鉴Scheme语言（将函数提升到&amp;quot;第一等公民&amp;quot;first class的地位），又借鉴了Self语言（使用基于原型prototype的继承机制），用短短十天的时间设计出js的最初版本，由于设计阶段的仓促，JavaScript存在了许多遗留缺陷。同时，作为历史上第一例同时结合函数式编程和面向对象编程的语言，它没有涉及先例可以参考。
1996年8月，微软公司宣布推出自己的脚本语言Jscript。网景公司为了迎战微软，决定申请JavasScript的国际标准。。Ecma国际（前身为欧洲计算机制造商协会）创建了ECMA-262标准（ECMAScript）。1997年6月，正式颁布。因此，JavaScript的语言规格还没来及调整，就固化了。
参考来源 JavaScript 的历史  JavaScript 诞生记 JavaScript 的10个设计缺陷</description>
    </item>
    
    <item>
      <title>浅析URL及其作用</title>
      <link>https://lynnlu07.github.io/2019/10/%E6%B5%85%E6%9E%90url%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 08 Oct 2019 22:35:46 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/10/%E6%B5%85%E6%9E%90url%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/</guid>
      <description>1. URL 包含了哪几部分，每部分分别有什么作用? URL指的是统一资源定位符（Uniform Resource Locator）。URL包含协议、域名或IP、端口号、路径、查询参数、锚点。
http://www.example.com:80/path/to/myfile.html?key1=value1&amp;amp;key2=value2#SomewhereInTheDocument
http://是协议，表明了浏览器必须使用何种协议，HTTP或HTTPS。
www.example.com 是域名。表明正在请求哪个Web服务器。或者，可以直接使用IP address。
:80 是端口。表示用于访问Web服务器上的资源的技术“门”。HTTP协议的标准端口，HTTP为80，HTTPS为443。
/path/to/myfile.html是网络服务器上资源的路径。在Web的早期阶段，像这样的路径表示Web服务器上的物理文件位置。
?key1=value1&amp;amp;key2=value2 是查询参数。 这些参数是用 &amp;amp; 符号分隔的键/值对列表。每个Web服务器都有自己关于参数的规则。
#SomewhereInTheDocument是锚点。 锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向。例如，在视频或音频文档上，浏览器将尝试转到锚代表的时间。
2. DNS 的作用是什么? nslookup 命令怎么用? DNS 是域名系统 (Domain Name System) ，它是由解析器和域名服务器组成的。域名服务器是保存有该网络中所有主机的域名和对应IP地址，并将域名转换为IP地址。有了DNS服务器，就不用输入IP地址来访问一个网站，而是可以通过输入网址访问。
使用nslookup来解析域名。
3. IP 的作用是什么，ping 命令怎么用? IP的作用是定位一台设备，封装数据报文以与其他设备交流。 使用ping命令查看IP地址，输入ping+域名。 4. 域名是什么，分别哪几类域名? 域名（Domain names）是互联网基础架构的关键部分。任何连上互联网的电脑都可以通过一个公共IP地址访问到。
域名的分类
1.类别域名(国际域名)共有7个。com(商业公司);.net(网络服务);.org(组织协会等);.gov(政府部门);.edu(教育机构);.mil(军事领域);.int(国际组织)。
2.是国别域名(地理顶级域名)，共有243个国家和地区的代码，例如.CN代表中国，.UK代表英国。</description>
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>https://lynnlu07.github.io/2019/10/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 05 Oct 2019 10:09:45 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/10/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>1. 浏览器渲染原理 根据 HTML 和 CSS 输入构建了 DOM 树和 CSSOM树。不过，它们都是独立的对象，分别网罗文档不同方面的信息：一个描述内容，另一个则是描述需要对文档应用的样式规则。我们该如何将两者合并，让浏览器在屏幕上渲染像素呢？
JavaScript→style→layout→paint→composite
样式计算style。此过程是根据匹配选择器，例如 .headline 或 .nav &amp;gt; .nav__item计算出哪些元素应用哪些 CSS规则的过程。从中知道规则之后，将应用规则并计算每个元素的最终样式。
布局layout。在知道对一个元素应用哪些规则之后，浏览器即可开始计算它要占据的空间大小及其在屏幕的位置。
绘制paint。填充像素的过程。它涉及绘出文本、颜色、图像、边框和阴影，基本上包括元素的每个可视部分。绘制一般是在多个表面（通常称为层）上完成的，使用最终渲染树将像素渲染到屏幕上。
合成composite。由于页面的各部分可能被绘制到多层，由此它们需要按正确顺序绘制到屏幕上，以便正确渲染页面。对于与另一元素重叠的元素来说，这点特别重要，因为一个错误可能使一个元素错误地出现在另一个元素的上层。
2. CSS基础概念 文档流 normal flow  inline元素的宽度为内部inline元素的和，不能用width来指定；高度由line-height间接确定，与height无关。 block元素默认自动计算宽度，可用width指定；宽度由内部文档流元素决定，可以设height。 inline-block结合二者特点，可用width和height指定。  盒模型 box CSS 盒模型分为 content-box 和 border-box。
content-box 宽度 width = content，不包含 padding 和 border
border-box 宽度 width = content + padding + border
一般使用border-box
3.CSS布局 float布局 子元素加上float:left和width 父元素加上.clearfox
flex布局 justify-content: flex-start: 元素和容器的左端对齐。 flex-end: 元素和容器的右端对齐。 center: 元素在容器里居中。 space-between:元素之间保持相等的距离。 space-around:元素周围保持相等的距离。 align-items: flex-start: 元素与容器的顶部对齐。 flex-end: 元素与容器的底部对齐。 center: 元素纵向居中。 baseline: 元素在容器的基线位置显示。 stretch: 元素被拉伸以填满整个容器。 row: 元素摆放的方向和文字方向一致。 row-reverse: 元素摆放的方向和文字方向相反。 column: 元素从上放到下。 column-reverse: 元素从下放到上。 nowrap: 所有的元素都在一行。 wrap: 元素自动换成多行。 wrap-reverse: 元素自动换成逆序的多行 flex-flow:flex-drection flex wrap方向和换行</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://lynnlu07.github.io/2019/09/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 25 Sep 2019 23:14:51 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/09/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>1. &amp;lt;a&amp;gt;标签 作用：可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。
&amp;lt;a&amp;gt;的属性：href, target, download.
href属性的用法   跳转外部页面，如
 &amp;lt;a href=&amp;quot;https://baidu.com&amp;quot;&amp;gt;baidu超链接&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://baidu.com&amp;quot;&amp;gt;baidu超链接&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;//baidu.com&amp;quot;&amp;gt;baidu无协议网址&amp;lt;/a&amp;gt;    跳转内部锚点，使用锚点#，此时点击&amp;lt;a&amp;gt;标签不发送请求，如 &amp;lt;a href=&amp;quot;#aaa&amp;quot;&amp;gt;aaa&amp;lt;a/&amp;gt;，此时点击a链接页面锚点变为aaa，使用锚点可以实现当前页面的跳转；
  &amp;lt;a&amp;gt;标签href内容为空，如 &amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;baidu&amp;lt;/a&amp;gt;,点击a链接会刷新当前页面；
  类似 &amp;lt;a href=&amp;quot;name=xxx&amp;quot;&amp;gt;a链接&amp;lt;/a&amp;gt; 的&amp;lt;a&amp;gt;标签，再点击后会发送一个GET请求，请求的值就是 name=xxx
  使用路径作为href的值， &amp;lt;a href=&amp;quot;main.html&amp;quot;&amp;gt;main&amp;lt;/a&amp;gt;，点击后会跳转到 main.html；
  伪协议： &amp;lt;a href=&amp;quot;javascript: alert(1);&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; 会执行href中的JavaScript代码，&amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;将不会执行任何操作；
  跳转到邮箱电话，如
 &amp;lt;a href=&amp;quot;mailto:lynnlzy@hotmail.com&amp;quot;&amp;gt;发邮件给Lynn&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;tel:139653176627&amp;quot;&amp;gt;拨打热线&amp;lt;/a&amp;gt;    target属性的用法   _blank：在新窗口打开，如 &amp;lt;a href=&amp;quot;https://baidu.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;baidu&amp;lt;/a&amp;gt;则会在新窗口打开百度页面。 _self：加载当前页面，如果没有指定属性，则此值为默认；  _top： 加载响应进入顶层页面，如果没有父级框架或页面，效果与 _self相同；  _parent：在父级页面打开地址。  download属性的用法  指示浏览器下载URL，保存到本地。  2.</description>
    </item>
    
    <item>
      <title>HTML笔记</title>
      <link>https://lynnlu07.github.io/2019/09/html%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 22 Sep 2019 01:31:03 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/09/html%E7%AC%94%E8%AE%B0/</guid>
      <description>  HTML是谁发明的？ Tim Berners-Lee 李爵士
  HTML 起手应该写什么？ 文档类型hmtl，lang设置语言，head标签，body标签，字符编码UTF-8，content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;禁用缩放，content=&amp;quot;ie=edge&amp;quot;将引擎设为最新版，title标题。
  常用的表章节的标签有哪些，分别是什么意思？   h1~h6 不同大小的标题，依次递减。 section 章节 article 文章 p 段落 main 主要内容 aside 旁支内容 header 头部 footer 脚部 div 区块  全局属性有哪些？ 全局属性是所有标签都具有的属性。   class 规定元素的类名 contenteditable 规定是否可编辑元素的内容 hidden 规定对元素进行隐藏 id 规定元素的唯一id style 规定元素的行内样式（inline style） tabindex 设置元素的tab键控制次序 title 规定元素的额外信息（可在工具提示中显示）  常用的内容标签有哪些，分别是什么意思?   ol+li (ordered list+list item) 有序列表 ul+li (unordered list+list item)无序列表 di+dt+dd (description list+term+data) dl表示一组术语的列。dt定义术语名，dd定义术语解释。 pre (preformatted)浏览器保留该标签内部原始的换行和空格，默认以等宽字体显示标签内容。 hr 水平线，它没有闭合标签。 br (break) 换行，没有闭合标签。 a (anchor) 链接 em (emphasis) 强调，浏览器会斜体显示。 strong 标签包含的内容具有很强的重要性，浏览器会粗体显示。 code 表示标签内容是计算机代码，浏览器会以等宽字体显示。如果需要表示多行代码，code标签必须放在pre标签内部，code本身仅表示一行代码。 q (quote) 引用，有cite属性，浏览器斜体显示，添加半角的双引号，用于少量文字引用。 blockquote 引用，有cite属性，浏览器斜体显，用于大量文字引用示。  </description>
    </item>
    
    <item>
      <title>如何使用 GitHub Pages 预览 HTML</title>
      <link>https://lynnlu07.github.io/2019/09/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-github-pages-%E9%A2%84%E8%A7%88-html/</link>
      <pubDate>Sun, 22 Sep 2019 00:05:11 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/09/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-github-pages-%E9%A2%84%E8%A7%88-html/</guid>
      <description> 进入repo，打开setting。  往下拉到GitHub Pages。  source一栏选择master branch。  得到这个repo的预览地址。  在预览地址后面加上想访问的html路径名称即可。  例如我的html路径名称为git-demo-1/index.html，则可以访问http://lynnlu.xyz/git-demo-1/index.html。   </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>https://lynnlu07.github.io/2019/09/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Sun, 15 Sep 2019 23:14:51 +0800</pubDate>
      
      <guid>https://lynnlu07.github.io/2019/09/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了，希望可以写出好文章给大家看。</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>https://lynnlu07.github.io/1/01/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lynnlu07.github.io/1/01/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>